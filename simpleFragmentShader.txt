#version 330

in vec3 LightIntensity;
in vec2 TexCoord;
in vec3 Normal;  
in vec3 Position;
in vec3 FragPos;

uniform sampler2D texture1;
uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;


void main(){
	//ambient
	float ambientStrength = 0.1;
 	vec3 ambient = ambientStrength * LightIntensity;
    	vec3 result = ambient * objectColor;

	//diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(Position - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * objectColor;

	// specular
    	//float specularStrength = 0.5;
    	//vec3 viewDir = normalize(viewPos - FragPos);
  	//vec3 reflectDir = reflect(-lightDir, norm);  
    	//float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    	//vec3 specular = specularStrength * spec * lightColor;  

	//vec3 result = (ambient * diffuse * specular) * objectColour;

	gl_FragColor = vec4(diffuse, 1.0);
	//gl_FragColor = texture(texture1, TexCoord);
}